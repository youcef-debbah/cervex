<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets">

<h:head>
</h:head>

<h:body>
	<ui:composition>
		<h:outputStylesheet library="jsoftware" name="css/reveal.css"
			target="head" />
		<h:outputStylesheet library="jsoftware"
			name="css/theme/#{theme}.css" target="head" />
		<h:outputScript library="jsoftware" name="js/reveal.js" target="head" />
		<h:outputScript>
		try {
			Reveal.initialize({
				controls: #{empty controls? "true" : controls},
				progress: #{empty progress? "true" : progress},
				slideNumber: #{empty slideNumber? "false" : slideNumber},
				history: #{empty history? "false" : history},
				keyboard: #{empty keyboard? "true" : keyboard},
				overview: #{empty overview? "true" : overview},
				center: #{empty center? "true" : center},
				touch: #{empty touch? "true" : touch},
				loop: #{empty loop? "false" : loop},
				rtl: #{empty rtl? "false" : rtl},
				shuffle: #{empty shuffle? "false" : shuffle},
				fragments: #{empty fragments? "true" : fragments},
				embedded: #{empty embedded? "false" : embedded},
				help: #{empty help? "true" : help},
				showNotes: #{empty showNotes? "false" : showNotes},
				autoSlide: #{empty autoSlide? "0" : autoSlide},
				autoSlideStoppable: #{empty autoSlideStoppable? "true" : autoSlideStoppable},
				autoSlideMethod: #{empty autoSlideMethod? "Reveal.navigateNext" : autoSlideMethod},
				mouseWheel: #{empty mouseWheel? "false" : mouseWheel},
				hideAddressBar: #{empty hideAddressBar? "true" : hideAddressBar},
				previewLinks: #{empty previewLinks? "false" : previewLinks},
				transition: '#{empty transition? "slide" : transition}',
				transitionSpeed: '#{empty transitionSpeed? "default" : transitionSpeed}',
				backgroundTransition: '#{empty backgroundTransition? "fade" : backgroundTransition}',
				viewDistance: #{empty viewDistance? "3" : viewDistance},
				parallaxBackgroundImage: '#{parallaxBackgroundImage}',
				parallaxBackgroundSize: '#{parallaxBackgroundSize}',
				parallaxBackgroundHorizontal: #{empty parallaxBackgroundHorizontal? "null" : parallaxBackgroundHorizontal},
				parallaxBackgroundVertical: #{empty parallaxBackgroundVertical? "null" : parallaxBackgroundVertical}
			});
		} catch(e) {
			console.log(e.message);
		}
		</h:outputScript>
	</ui:composition>
</h:body>
</html>